(function () {
/**
 * almond 0.2.6 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        if (config.deps) {
            req(config.deps, config.callback);
        }
        return req;
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

define('event',[], function() {

  function Event() {
    this.init();
  }

  Event.prototype = {
    listeners: null,

    init: function() {
      this.listeners = [];
    },

    addListener: function(event, callback) {
      if (!this.listeners[event]) {
        this.listeners[event] = [];
      }

      this.listeners[event].push(callback);
    },

    removeListener: function(event, callback) {
      if (!this.listeners[event]) {
        return false;
      }

      for(var i = 0; i < this.listeners[event].length; i++) {
        if (this.listeners[event][i] == callback) {
          this.listeners[event] = this.listeners[event].splice(i, 1);
          return true;
        }
      }
    },

    trigger: function(event, data) {
      if (!this.listeners[event]) {
        return false;
      }

      function callListener(listener) {
        setTimeout(function() {
          listener(data);
        }, 0);
      }

      for(var i = 0; i < this.listeners[event].length; i++) {
        callListener(this.listeners[event][i]);
      }

      return true;
    }
  }

  return new Event(); 

});
define('globals',[], function() {
  return {
    isiOS: function() {
      return this.hasDeviceType("iOS");
    },

    isPC: function() {
      return this.hasDeviceType("PC");
    },

    isMac: function() {
      return this.hasDeviceType("Mac");
    },

    hasDeviceType: function(type) {
      return this.getDeviceType().indexOf(type) !== -1;
    },

    getDeviceType: function() {
      if (localStorage.deviceType) {
        //return JSON.parse(localStorage.deviceType);
      }

      var devices = [];
      var userAgent = navigator.userAgent;

      if (userAgent.match(/OS 7/g)) {
        devices.push("iOS");

        if (userAgent.match(/iPad/g)) {
          devices.push("iPad");
          devices.push("tablet");
        }
        else if (userAgent.match(/iPhone/g)) {
          devices.push("iPhone");
          devices.push("phone");
        }
      }
      else if (userAgent.match(/Mac/g)) {
        devices.push("Mac");
        devices.push("computer");
      }
      else
      {
        devices.push("PC");
        devices.push("computer");
      }



      localStorage.deviceType = JSON.stringify(devices);

      return devices;
    },

    setHTMLDevices: function() {
      var devices = this.getDeviceType();

      var body = document.body;
      body.className = devices.join(" ");
    }

  }
});
define('class',[], function() {
	/* Simple Javascript inheritance by John Resig */

	var initializing = false,
		fnTest = /xyz/.test(function() {
			xyz;
		}) ? /\b_super\b/ : /.*/;

	// The base CClass implementation (does nothing)
	this.Class = function() {};

	// Create a new CLass that inherits from this class
	Class.extend = function(prop) {
		var _super = this.prototype;

		// Instantiate a base class (but only create the instance, don't run the consutrcutor)
		initializing = true;
		var prototype = new this();
		initializing = false;

		// Copy the properties over onto the new prototype
		for (var name in prop) {
			// Check if we're overwriting an existing function
			prototype[name] = typeof prop[name] == "function" && typeof _super[name] == "function" && fnTest.test(prop[name]) ?
				(function(name, fn) {
				return function() {				
					var tmp = this._super;

					// Add a new ._super() method that is the same method
					// but on the super-class
					this._super = _super[name];

					// The method only need to be bound temporarily, so we
					// remove it when we're done executing

					var ret = fn.apply(this, arguments);
					this._super = tmp;

					return ret;
				};
			})(name, prop[name]) : prop[name];
		}

		// The dummy class constructor

		function Class() {
			// All construction is actually done in the init method
			if (!initializing && this.init)
				this.init.apply(this, arguments);
		}

		// Populate our constructed prototype object
		Class.prototype = prototype;

		// Enforce the constructor to be what we expect
		Class.prototype.constructor = Class;

		// And make this class extendable
		Class.extend = arguments.callee;

		return Class;

	};

	return this.Class;
});
define('section',["class"], function(Class) {

	var Section = Class.extend({
		id: null,
		element: null,

		init: function() {
			this.element = document.getElementById(this.id);
		},

		show: null,
		hide: null,

		afterShow: function() {
			this.element.style.display = "block";
		},

		afterHide: function() {
			this.element.style.display = "";
		}

	});

	return Section;
});
define('tapHandler',[], function() {
  function TapHandler(element, options) {
    this.init(element, options);
  }

  TapHandler.prototype = {
    _element: null,
    _options: null,

    _distCutoff: 20,
    _timeCutoff: 500,

    // touch or mouse
    _startType: null,
    _startTime: null,
    _startX: null,
    _startY: null,

    _startScale: null,

    _lastX: null,
    _lastY: null,

    _lastScale: null,

    // Object with x and why of where the element is on the page
    _offset: null,

    _inTouch: false,
    _inGesture: false,

    _ignoreGestures: false,

    init: function(element, options) {
      this._element = element;
      this._options = options;

      // Replace with binded events
      this._move = this._move.bind(this);
      this._end = this._end.bind(this);
      this._gestureChange = this._gestureChange.bind(this);
      this._gestureEnd = this._gestureEnd.bind(this);

      this._offset = {
        x: element.offsetLeft,
        y: element.offsetTop
      };

      this._element.addEventListener("mousedown", this._start.bind(this));
      this._element.addEventListener("touchstart", this._start.bind(this));
      this._element.addEventListener("gesturestart", this._gestureStart.bind(this));
    },

    ignoreGestures: function(value) {
      this._ignoreGestures = value;
    },


    _start: function(e) {
      this._processEvent(e);

      // Ignore these if we are currently gesturing
      if (this._inGesture) {
        return;
      }

      this._startType = "mouse";
      if (e.touches) {
        this._startType = "touch";
      }

      this._inTouch = true;


      this._startTime = e.timeStamp;

      this._startX = this._lastX = e.x;
      this._startY = this._lastY = e.y;

      if (this._options.start) {
        this._options.start(e);
      }

      if (this._startType == "touch") {
        document.addEventListener("touchmove", this._move);
        document.addEventListener("touchend", this._end);
      } else if (this._startType == "mouse") {
        document.addEventListener("mousemove", this._move);
        document.addEventListener("mouseup", this._end);
      }
    },

    _move: function(e) {
      this._processEvent(e);

      this._lastX = e.x;
      this._lastY = e.y;

      if (this._options.move) {
        this._options.move(e);
      }
    },

    _end: function(e) {


      if (!e ||
        (e && !e.touches) ||
        (e && e.touches && e.touches.length == 0)
      ) {
        this._endTouchHandlers();
      }

      if (e) {
        this._processEvent(e);


        var dist = Math.sqrt(((e.x - this._startX) * (e.x - this._startX)) + ((e.y - this._startY) * (e.y - this._startY)));
        if (dist < this._distCutoff && (e.timeStamp - this._startTime < this._timeCutoff)) {
          if (this._options.tap) {
            this._options.tap(e);
          }
        }
      }


      // It wasn't a tap, just an up
      if (this._options.end) {
        this._options.end(e);
      }


      this._inTouch = false;

      // Keep mouse events from being called
      if (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
      }
    },

    _gestureStart: function(e) {
      if (this._ignoreGestures) {
        return;
      }

      this._inGesture = true;

      // We need to end the touch
      this._end();


      this._processEvent(e);
      this._processGesture(e);

      this._startTime = e.timeStamp;

      this._startX = this._lastX = e.x;
      this._startY = this._lastY = e.y;

      this._startScale = this._lastScale = e.scale;

      document.addEventListener("gesturechange", this._gestureChange);
      document.addEventListener("gestureend", this._gestureEnd);
    },

    _gestureChange: function(e) {
      this._processEvent(e);
      this._processGesture(e);

      this._lastX = e.x;
      this._lastY = e.y;
      this._lastScale = e.scale;

      //console.log(e.xFromLast, e.yFromLast);

      this._lastScale = e.scale;

      if (this._options.gesture) {
        this._options.gesture(e);
      }
    },

    _gestureEnd: function(e) {
      this._processEvent(e);
      this._processGesture(e);

      document.removeEventListener("gesturechange", this._gestureChange);
      document.removeEventListener("gestureend", this._gestureEnd);

      this._inGesture = false;
    },

    // Unregister the regular touch handlers, used for when gestures start
    _endTouchHandlers: function() {
      if (this._startType == "touch") {
        document.removeEventListener("touchmove", this._move);
        document.removeEventListener("touchend", this._end);
      } else if (this._startType == "mouse") {
        document.removeEventListener("mousemove", this._move);
        document.removeEventListener("mouseup", this._end);
      }
    },

    // Given an e, add things like x and y regardless of touch or mouse
    _processEvent: function(e) {
      // It's a touch
      if (e.touches && e.touches.length > 0) {
        // Use the last touch
        e.x = e.touches[e.touches.length - 1].clientX;
        e.y = e.touches[e.touches.length - 1].clientY;
      } else if (e.clientX) {
        // It's a click
        e.x = e.clientX;
        e.y = e.clientY;
      } else if (e.pageX) {
        // gesture events only get a layerx
        e.x = e.pageX;
        e.y = e.pageY;
      } else {
        // It's probably an end, there is no coords
        e.x = this._lastX;
        e.y = this._lastY;
      }

      e.distFromLeft = e.x - this._offset.x;
      e.distFromTop = e.y - this._offset.y;

      e.xFromLast = e.x - this._lastX;
      e.yFromLast = e.y - this._lastY;
    },

    _processGesture: function(e) {
      e.scaleFromLast = e.scale - this._lastScale;
    }


  };

  return TapHandler;
});
define('sections/login',["event", "section", "tapHandler"], function(Event, Section, TapHandler) {

  var Login = Section.extend({
    id: "login",

    init: function() {
      this._super();
      console.log("login init");
      
      var button = document.getElementById("loginbutton");
      new TapHandler(button, {tap: this._loginClicked.bind(this) });
    },

    _loginClicked: function() {
      setTimeout(function() {
        Event.trigger("login");  
      }, 400);
    },

    show: function() {
      console.log("login shown");
    },

    hide: function() {
      console.log("login hidden");
    }, 
  });

  return Login;

});
define('helpers',[], function() {
  return {
    parentEleWithClassname: function(ele, className) {
      if (ele == null || !ele.classList) {
        return false;
      }

      if (ele.classList.contains(className)) {
        return ele;
      }

      return this.parentEleWithClassname(ele.parentNode, className);
    },


    screenToWorld: function(settings, x, y) {
      return {
        x: (x - settings.offsetX) / settings.scale,
        y: (y - settings.offsetY) / settings.scale
      };
    },

    worldToScreen: function(settings, x, y) {
      return {
        x: (x) * settings.scale + settings.offsetX,
        y: (y) * settings.scale + settings.offsetY
      };
    },

    getCurveControlPoints: function(knots) {

      function getFirstControlPoints(rhs) {
        var n = rhs.length;
        var x = new Array(n); // Solution vector
        var tmp = new Array(n); // Temp workspace

        var b = 2.0;
        x[0] = rhs[0] / b;

        for (var i = 1; i < n; i++) { // Decomposition and forward substitution
          tmp[i] = 1 / b;
          b = (i < n - 1 ? 4 : 3.5) - tmp[i];
          x[i] = (rhs[i] - x[i - 1]) / b;
        }

        for (var i = 1; i < n; i++) {
          x[n - i - 1] -= tmp[n - i] * x[n - i]; // backsubstituion
        }

        return x;
      };


      var n = knots.length - 1;

      var firstControlPoints = [];
      var secondControlPoints = [];

      if (n < 1) {
        console.error("Must have at least two knots");
        return;
      }

      if (n == 1) {
        // Special case: should be a line
        firstControlPoints.push({});
        firstControlPoints[0].x = (2 * knots[0].x + knots[1].x) / 3;
        firstControlPoints[0].y = (2 * knots[0].y + knots[1].y) / 3;

        secondControlPoints.push({});
        secondControlPoints[0].x = 2 * firstControlPoints[0].x - knots[0].x;
        secondControlPoints[0].y = 2 * firstControlPoints[0].y - knots[0].y;

        return [{
          first: firstControlPoints[0],
          second: secondControlPoints[0]
        }];
      }

      // Calculate first Bezier control points
      // Right hand side vector
      var rhs = new Array(n);


      // Set right hand side X values
      for (var i = 1; i < n - 1; ++i) {
        rhs[i] = 4 * knots[i].x + 2 * knots[i + 1].x;
      }

      rhs[0] = knots[0].x + 2 * knots[1].x;
      rhs[n - 1] = (8 * knots[n - 1].x + knots[n].x) / 2;

      // Get first control points x-values
      var x = getFirstControlPoints(rhs);

      // Set right hand side Y values
      for (var i = 1; i < n - 1; ++i) {
        rhs[i] = 4 * knots[i].y + 2 * knots[i + 1].y;
      }

      rhs[0] = knots[0].y + 2 * knots[1].y;
      rhs[n - 1] = (8 * knots[n - 1].y + knots[n].y) / 2;

      // Get first control points Y-values
      var y = getFirstControlPoints(rhs);

      // Fill output arrays.
      firstControlPoints = new Array(n);
      secondControlPoints = new Array(n);

      for (var i = 0; i < n; ++i) {
        // First control point
        firstControlPoints[i] = {
          x: x[i],
          y: y[i]
        };

        // Second control point
        if (i < n - 1) {
          secondControlPoints[i] = {
            x: 2 * knots[i + 1].x - x[i + 1],
            y: 2 * knots[i + 1].y - y[i + 1]
          };
        } else {
          secondControlPoints[i] = {
            x: (knots[n].x + x[n - 1]) / 2,
            y: (knots[n].y + y[n - 1]) / 2
          };
        }
      }

      var controlPoints = new Array(n);
      for (var i = 0; i < n; ++i) {
        controlPoints[i] = {
          first: firstControlPoints[i],
          second: secondControlPoints[i]
        }
      }

      return controlPoints;
    },
  };
});
define('dataBacking/baseBacking',["class"], function(Class) {
  var BaseBacking = Class.extend({
    init: function() {
      throw "Do not use this class without extending it";
    },

    getFiles: function(callback) {
      console.error("Implement this function");
    },

    getFileActions: function(fileId, callback) {
      console.error("Implement this function");
    },

    createFile: function(callback) {
      console.error("Implement this function");
    },

    renameFile: function(fileId, newFileName) {
      console.error("Implement this function");
    },

    deleteFile: function(fileId) {
      console.error("Implement this function");
    },

    addAction: function(fileId, action) {
      console.error("Implement this function");
    },

    removeLastAction: function(fileId) {
      console.error("Implement this function");
    },

    updateFileModified: function(fileId, timestamp) {
      console.error("Implement this function");
    },

    clearAll: function() {
      console.error("Implement this function");
    },

    _getGuid: function() {
      return 'T^' + Date.now() + "-" + Math.round(Math.random() * 1000000);
    },
  });

  return BaseBacking;
});
define('db',[], function() {
    
    var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.oIndexedDB || window.msIndexedDB,
        IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange,
        transactionModes = {
            readonly: 'readonly',
            readwrite: 'readwrite'
        };
        
    var hasOwn = Object.prototype.hasOwnProperty;

    if ( !indexedDB ) {
        console.warn('IndexedDB required');
        return;
    }

    var defaultMapper = function (value) {
        return value;
    };

    var CallbackList = function () {
        var state,
            list = [];

        var exec = function ( context , args ) {
            if ( list ) {
                args = args || [];
                state = state || [ context , args ];

                for ( var i = 0 , il = list.length ; i < il ; i++ ) {
                    list[ i ].apply( state[ 0 ] , state[ 1 ] );
                }

                list = [];
            }
        };

        this.add = function () {
            for ( var i = 0 , il = arguments.length ; i < il ; i ++ ) {
                list.push( arguments[ i ] );
            }

            if ( state ) {
                exec();
            }

            return this;
        };

        this.execute = function () {
            exec( this , arguments );
            return this;
        };
    };

    var Deferred = function ( func ) {
        var state = 'progress',
            actions = [
                [ 'resolve' , 'done' , new CallbackList() , 'resolved' ],
                [ 'reject' , 'fail' , new CallbackList() , 'rejected' ],
                [ 'notify' , 'progress' , new CallbackList() ],
            ],
            deferred = {},
            promise = {
                state: function () {
                    return state;
                },
                then: function ( /* doneHandler , failedHandler , progressHandler */ ) {
                    var handlers = arguments;

                    return Deferred(function ( newDefer ) {
                        actions.forEach(function ( action , i ) {
                            var handler = handlers[ i ];

                            deferred[ action[ 1 ] ]( typeof handler === 'function' ?
                                function () {
                                    var returned = handler.apply( this , arguments );

                                    if ( returned && typeof returned.promise === 'function' ) {
                                        returned.promise()
                                            .done( newDefer.resolve )
                                            .fail( newDefer.reject )
                                            .progress( newDefer.notify );
                                    }
                                } : newDefer[ action[ 0 ] ]
                            );
                        });
                    }).promise();
                },
                promise: function ( obj ) {
                    if ( obj ) {
                        Object.keys( promise )
                            .forEach(function ( key ) {
                                obj[ key ] = promise[ key ];
                            });

                        return obj;
                    }
                    return promise;
                }
            };

        actions.forEach(function ( action , i ) {
            var list = action[ 2 ],
                actionState = action[ 3 ];

            promise[ action[ 1 ] ] = list.add;

            if ( actionState ) {
                list.add(function () {
                    state = actionState;
                });
            }

            deferred[ action[ 0 ] ] = list.execute;
        });

        promise.promise( deferred );

        if ( func ) {
            func.call( deferred , deferred );
        }

        return deferred;
    };

    var Server = function ( db , name ) {
        var that = this,
            closed = false;

        this.add = function( table ) {
            if ( closed ) {
                throw 'Database has been closed';
            }

            var records = [];
            for (var i = 0; i < arguments.length - 1; i++) {
                records[i] = arguments[i + 1];
            }

            var transaction = db.transaction( table , transactionModes.readwrite ),
                store = transaction.objectStore( table ),
                deferred = Deferred();
            
            records.forEach( function ( record ) {
                var req;
                if ( record.item && record.key ) {
                    var key = record.key;
                    record = record.item;
                    req = store.add( record , key );
                } else {
                    req = store.add( record );
                }

                req.onsuccess = function ( e ) {
                    var target = e.target;
                    var keyPath = target.source.keyPath;
                    if ( keyPath === null ) {
                        keyPath = '__id__';
                    }
                    Object.defineProperty( record , keyPath , {
                        value: target.result,
                        enumerable: true
                    });
                    deferred.notify();
                };
            } );
            
            transaction.oncomplete = function () {
                deferred.resolve( records , that );
            };
            transaction.onerror = function ( e ) {
                deferred.reject( records , e );
            };
            transaction.onabort = function ( e ) {
                deferred.reject( records , e );
            };
            return deferred.promise();
        };

        this.update = function( table ) {
            if ( closed ) {
                throw 'Database has been closed';
            }

            var records = [];
            for ( var i = 0 ; i < arguments.length - 1 ; i++ ) {
                records[ i ] = arguments[ i + 1 ];
            }

            var transaction = db.transaction( table , transactionModes.readwrite ),
                store = transaction.objectStore( table ),
                keyPath = store.keyPath,
                deferred = Deferred();

            records.forEach( function ( record ) {
                var req;
                if ( record.item && record.key ) {
                    var key = record.key;
                    record = record.item;
                    req = store.put( record , key );
                } else {
                    req = store.put( record );
                }

                req.onsuccess = function ( e ) {
                    deferred.notify();
                };
            } );
            
            transaction.oncomplete = function () {
                deferred.resolve( records , that );
            };
            transaction.onerror = function ( e ) {
                deferred.reject( records , e );
            };
            transaction.onabort = function ( e ) {
                deferred.reject( records , e );
            };
            return deferred.promise();
        };
        
        this.remove = function ( table , key ) {
            if ( closed ) {
                throw 'Database has been closed';
            }
            var transaction = db.transaction( table , transactionModes.readwrite ),
                store = transaction.objectStore( table ),
                deferred = Deferred();
            
            var req = store.delete( key );
            transaction.oncomplete = function ( ) {
                deferred.resolve( key );
            };
            transaction.onerror = function ( e ) {
                deferred.reject( e );
            };
            return deferred.promise();
        };

        this.clear = function ( table ) {
            if ( closed ) {
                throw 'Database has been closed';
            }
            var transaction = db.transaction( table , transactionModes.readwrite ),
                store = transaction.objectStore( table ),
                deferred = Deferred();

            var req = store.clear();
            transaction.oncomplete = function ( ) {
                deferred.resolve( );
            };
            transaction.onerror = function ( e ) {
                deferred.reject( e );
            };
            return deferred.promise();
        };
        
        this.close = function ( ) {
            if ( closed ) {
                throw 'Database has been closed';
            }
            db.close();
            closed = true;
            delete dbCache[ name ];
        };

        this.get = function ( table , id ) {
            if ( closed ) {
                throw 'Database has been closed';
            }
            var transaction = db.transaction( table ),
                store = transaction.objectStore( table ),
                deferred = Deferred();

            var req = store.get( id );
            req.onsuccess = function ( e ) {
                deferred.resolve( e.target.result );
            };
            transaction.onerror = function ( e ) {
                deferred.reject( e );
            };
            return deferred.promise();
        };

        this.query = function ( table , index ) {
            if ( closed ) {
                throw 'Database has been closed';
            }
            return new IndexQuery( table , db , index );
        };

        for ( var i = 0 , il = db.objectStoreNames.length ; i < il ; i++ ) {
            (function ( storeName ) {
                that[ storeName ] = { };
                for ( var i in that ) {
                    if ( !hasOwn.call( that , i ) || i === 'close' ) {
                        continue;
                    }
                    that[ storeName ][ i ] = (function ( i ) {
                        return function () {
                            var args = [ storeName ].concat( [].slice.call( arguments , 0 ) );
                            return that[ i ].apply( that , args );
                        };
                    })( i );
                }
            })( db.objectStoreNames[ i ] );
        }
    };

    var IndexQuery = function ( table , db , indexName ) {
        var that = this;
        var modifyObj = false;

        var runQuery = function ( type, args , cursorType , direction, limitRange, filters , mapper ) {
            var transaction = db.transaction( table, modifyObj ? transactionModes.readwrite : transactionModes.readonly ),
                store = transaction.objectStore( table ),
                index = indexName ? store.index( indexName ) : store,
                keyRange = type ? IDBKeyRange[ type ].apply( null, args ) : null,
                results = [],
                deferred = Deferred(),
                indexArgs = [ keyRange ],
                limitRange = limitRange ? limitRange : null,
                filters = filters ? filters : [],
                counter = 0;

            if ( cursorType !== 'count' ) {
                indexArgs.push( direction || 'next' );
            };

            // create a function that will set in the modifyObj properties into
            // the passed record.
            var modifyKeys = modifyObj ? Object.keys(modifyObj) : false;
            var modifyRecord = function(record) {
                for(var i = 0; i < modifyKeys.length; i++) {
                    var key = modifyKeys[i];
                    var val = modifyObj[key];
                    if(val instanceof Function) val = val(record);
                    record[key] = val;
                }
                return record;
            };

            index[cursorType].apply( index , indexArgs ).onsuccess = function ( e ) {
                var cursor = e.target.result;
                if ( typeof cursor === typeof 0 ) {
                    results = cursor;
                } else if ( cursor ) {
                  if ( limitRange !== null && limitRange[0] > counter) {
                      counter = limitRange[0];
                      cursor.advance(limitRange[0]);
                    } else if ( limitRange !== null && counter >= (limitRange[0] + limitRange[1]) ) {
                        //out of limit range... skip
                    } else {
                        var matchFilter = true;
                        var result = 'value' in cursor ? cursor.value : cursor.key;

                        filters.forEach( function ( filter ) {
                            if ( !filter || !filter.length ) {
                                //Invalid filter do nothing
                            } else if ( filter.length === 2 ) {
                                matchFilter = (result[filter[0]] === filter[1])
                            } else {
                                matchFilter = filter[0].apply(undefined,[result]);
                            }
                        });

                        if (matchFilter) {
                            counter++;
                            results.push( mapper(result) );
                            // if we're doing a modify, run it now
                            if(modifyObj) {
                                result = modifyRecord(result);
                                cursor.update(result);
                            }
                        }
                        cursor.continue();
                    }
                }
            };

            transaction.oncomplete = function () {
                deferred.resolve( results );
            };
            transaction.onerror = function ( e ) {
                deferred.reject( e );
            };
            transaction.onabort = function ( e ) {
                deferred.reject( e );
            };
            return deferred.promise();
        };

        var Query = function ( type , args ) {
            var direction = 'next',
                cursorType = 'openCursor',
                filters = [],
                limitRange = null,
                mapper = defaultMapper,
                unique = false;

            var execute = function () {
                return runQuery( type , args , cursorType , unique ? direction + 'unique' : direction, limitRange, filters , mapper );
            };

            var limit = function () {
                limitRange = Array.prototype.slice.call( arguments , 0 , 2 )
                if (limitRange.length == 1) {
                    limitRange.unshift(0)
                }

                return {
                    execute: execute
                };
            };
            var count = function () {
                direction = null;
                cursorType = 'count';

                return {
                    execute: execute
                };
            };
            var keys = function () {
                cursorType = 'openKeyCursor';

                return {
                    desc: desc,
                    execute: execute,
                    filter: filter,
                    distinct: distinct,
                    map: map
                };
            };
            var filter = function ( ) {
                filters.push( Array.prototype.slice.call( arguments , 0 , 2 ) );

                return {
                    keys: keys,
                    execute: execute,
                    filter: filter,
                    desc: desc,
                    distinct: distinct,
                    modify: modify,
                    limit: limit,
                    map: map
                };
            };
            var desc = function () {
                direction = 'prev';

                return {
                    keys: keys,
                    execute: execute,
                    filter: filter,
                    distinct: distinct,
                    modify: modify,
                    map: map
                };
            };
            var distinct = function () {
                unique = true;
                return {
                    keys: keys,
                    count: count,
                    execute: execute,
                    filter: filter,
                    desc: desc,
                    modify: modify,
                    map: map
                };
            };
            var modify = function(update) {
                modifyObj = update;
                return {
                    execute: execute
                };
            };
            var map = function (fn) {
                mapper = fn;

                return {
                    execute: execute,
                    count: count,
                    keys: keys,
                    filter: filter,
                    desc: desc,
                    distinct: distinct,
                    modify: modify,
                    limit: limit,
                    map: map
                };
            };

            return {
                execute: execute,
                count: count,
                keys: keys,
                filter: filter,
                desc: desc,
                distinct: distinct,
                modify: modify,
                limit: limit,
                map: map
            };
        };
        
        'only bound upperBound lowerBound'.split(' ').forEach(function (name) {
            that[name] = function () {
                return new Query( name , arguments );
            };
        });

        this.filter = function () {
            var query = new Query( null , null );
            return query.filter.apply( query , arguments );
        };

        this.all = function () {
            return this.filter();
        };
    };
    
    var createSchema = function ( e , schema , db ) {
        if ( typeof schema === 'function' ) {
            schema = schema();
        }
        
        for ( var tableName in schema ) {
            var table = schema[ tableName ];
            var store;
            if (!hasOwn.call(schema, tableName) || db.objectStoreNames.contains(tableName)) {
                store = e.currentTarget.transaction.objectStore(tableName);
            } else {
                store = db.createObjectStore(tableName, table.key);
            }

            for ( var indexKey in table.indexes ) {
                var index = table.indexes[ indexKey ];
                store.createIndex( indexKey , index.key || indexKey , Object.keys(index).length ? index : { unique: false } );
            }
        }
    };
    
    var open = function ( e , server , version , schema ) {
        var db = e.target.result;
        var s = new Server( db , server );
        var upgrade;

        var deferred = Deferred();
        deferred.resolve( s );
        dbCache[ server ] = db;

        return deferred.promise();
    };

    var dbCache = {};

    var db = {
        version: '0.9.0',
        open: function ( options ) {
            var request;

            var deferred = Deferred();

            // Check if we already have it in cache
            var serverCache = dbCache[options.server];

            if (serverCache) {
                // If it is already in cache, make sure that we also 
                // have all of the tables we are opening already

                for (var table in options.schema) {
                    if (!serverCache.objectStoreNames.contains(table)) {
                        serverCache.close();
                        delete dbCache[options.server];
                    }
                }
            }
             

            if ( dbCache[ options.server ]) {
                open( {
                    target: {
                        result: dbCache[ options.server ]
                    }
                } , options.server , options.version , options.schema )
                .done(deferred.resolve)
                .fail(deferred.reject)
                .progress(deferred.notify);
            } else {
                request = indexedDB.open( options.server , options.version );
                            
                request.onsuccess = function ( e ) {
                    open( e , options.server , options.version , options.schema )
                        .done(deferred.resolve)
                        .fail(deferred.reject)
                        .progress(deferred.notify);
                };
            
                request.onupgradeneeded = function ( e ) {
                    createSchema( e , options.schema , e.target.result );
                };
                request.onerror = function ( e ) {
                    deferred.reject( e );
                };
            }

            return deferred.promise();
        }
    };

    return db;
});
define('dataBacking/indexedDBBacking',["dataBacking/baseBacking", "db"], function(BaseBacking, db) {
  var IndexedDBBacking = BaseBacking.extend({
    _server: null,
    _files: null,

    // If we call other functions before the database is opened, 
    //these are the things we need to run
    _initCallbacks: null,

    init: function() {
      console.log("backing file used");
      this._files = [];

      this._initCallbacks = [];

      db.open({
        server: 'draw',
        version: 1,
        schema: {
          files: {
            key: {
              keyPath: 'id',
            },
            indexes: {
              id: {
                unique: true
              },
              modifiedTime: {
                //keyPath: 'modifiedTime'
              }
            }
          }
        }
      })
        .done((function(server) {
          console.log("Set up files server");
          this._server = server;

          // Go through all our delayed callbacks
          for (var i = 0; i < this._initCallbacks.length; i++) {
            var callback = this._initCallbacks[i];
            callback.func.apply(this, callback.args);
          }

        }).bind(this))
        .fail(function(e) {
          console.error("Failed setting up database", e);
        });
    },

    getFiles: function(callback) {
      if (!this._server) {
        this._doLater(this.getFiles, [callback]);
        return;
      }

      if (!callback) {
        throw "You must specify a callback";
      }

      this._server.files.query('modifiedTime')
        .all()
        .desc()
        .execute()
        .done((function(results) {
          callback(results);
        }).bind(this));
    },

    _getFileServer: function(fileId, callback) {
      if (this._files[fileId]) {
        callback(this._files[fileId]);
      } else {
        db.open({
          server: fileId,
          version: 1,
          schema: {
            actions: {
              key: {
                keyPath: 'id',
                autoIncrement: true
              }
              /*,
            indexes: {
              type: {},
              id: {
                unique: true
              }
            }
            */
            }
          }
        }).done((function(s) {
          this._files[fileId] = s;

          callback(s);
        }).bind(this))
          .fail(function(e) {
            console.error("Failed to create file database", e);
          });
      }
    },

    getFileActions: function(fileId, callback) {
      if (!this._server) {
        this._doLater(this.getFileActions, [fileId, callback]);
        return;
      }

      this._getFileServer(fileId, (function(server) {
        server.actions.query()
          .all()
          .execute()
          .done((function(results) {
            callback(results);
          }).bind(this));
      }).bind(this));
    },

    createFile: function(callback) {
      if (!this._server) {
        this._doLater(this.createFile, [callback]);
        return;
      }

      if (!callback) {
        throw "You must specify a callback";
      }

      var fileId = this._getGuid();

      var file = {
        id: fileId,
        name: "Untitled File",
        modifiedTime: Date.now()
      }

      this._server.files.add(file)
        .done((function(items) {
          var item = items[0];

          this._getFileServer(item.id, (function(s) {
            callback(item);
          }).bind(this));

        }).bind(this))
        .fail(function(e) {
          console.error("fail to add file to file list", e);
        });
    },

    renameFile: function(fileId, newFileName) {
      if (!this._server) {
        this._doLater(this.renameFile, [fileId]);
        return;
      }

      this._server.files.query('id')
        .only(fileId)
        .modify({
          name: newFileName
        })
        .execute()
        .done(function(results) {
          console.log("Want to rename file", results);
        })
        .fail(function(e) {
          console.error("Couldn't find file", e);
        })
    },

    deleteFile: function(fileId) {
      if (!this._server) {
        this._doLater(this.deleteFile, [fileId]);
        return;
      }

      this._server.files.remove(fileId)
        .done(function(key) {
          // item removed
          console.log("Deleted file from file table", fileId);

          var f = indexedDB.deleteDatabase(fileId);
          f.onsuccess = function(e) {
            console.log("Deleted Database for file", key);
          }
          f.onerror = function(e) {
            console.log("Error deleting database", e);
          }

          // Delete settings from local storage
          delete localStorage[fileId];

        })
        .fail(function(e) {
          console.error("Failed to delete file from file table", fileId);
        });
    },

    addAction: function(fileId, action) {
      this._getFileServer(fileId, (function(server) {
        server.actions
          .add(action)
          .done(function(item) {
            // item stored
          })
          .fail(function(e) {
            console.error("fail to write", e);
          });
      }).bind(this));
    },

    removeLastAction: function(fileId) {
      this._getFileServer(fileId, (function(server) {
        server.actions
          .remove(action.id)
          .done(function(key) {
            console.log('remove', key, action);
            // item removed
          });
      }).bind(this));ƒ

    },

    updateFileModified: function(fileId, timestamp) {
      if (!this._server) {
        this._doLater(this.updateFileModified, [fileId, timestamp]);
        return;
      }

      this._server.files.query('id')
        .only(fileId)
        .modify({
          modifiedTime: timestamp
        })
        .execute()
        .done(function(results) {})
        .fail(function(e) {
          console.error("Couldn't find file", e);
        });
    },

    clearAll: function() {
      this.getFiles((function(files) {
        for (var i = 0; i < files.length; i++) {
          this.deleteFile(files[i].id);
        }
      }).bind(this));
    },

    _doLater: function(func, args) {
      this._initCallbacks.push({
        func: func,
        args: args
      })
    },
  });

  return IndexedDBBacking;
});
define('dataBacking/webSQLBacking',["dataBacking/baseBacking"], function(BaseBacking) {
  var WebSQLBacking = BaseBacking.extend({
    _db: null,

    init: function() {
      console.log("sql init");
      this._error = this._error.bind(this);
      this._db = openDatabase("draw", "1.0", "draw", 2 * 1024 * 1024, this._databaseCreated.bind(this));
    },

    getFiles: function(callback) {
      this._db.readTransaction((function(tx) {
        tx.executeSql('SELECT * FROM `files` ORDER BY modifiedTime DESC', [], (function(transaction, results) {
          var resultsObj = this._convertResultToObject(results);
          callback(resultsObj);
        }).bind(this));
      }).bind(this));

    },

    getFileActions: function(fileId, callback) {
      this._db.readTransaction((function(tx) {
        tx.executeSql('SELECT * FROM `'+fileId+'`', [], (function(transaction, results) {
          var resultsObj = this._convertResultToObject(results, ["value"]);
          callback(resultsObj);
        }).bind(this));
      }).bind(this));
    },

    createFile: function(callback) {
      var fileId = this._getGuid();

      this._db.transaction(function(tx) {

        // You can't seem to use prepared statement variables as the table name
        tx.executeSql('CREATE TABLE IF NOT EXISTS `' + fileId + '` ' +
          '(id INTEGER PRIMARY KEY ASC, type VARCHAR(255), value TEXT)', []);

        var file = {
          id: fileId,
          name: "Untitled File",
          modifiedTime: Date.now()
        }

        tx.executeSql('INSERT INTO `files` VALUES (?, ?, ?)', [file.id, file.name, file.modifiedTime], this._success, this._error);

        callback(file);
      });
    },

    renameFile: function(fileId, newFileName) {
      this._db.transaction(function(tx) {
        tx.executeSql('UPDATE `files` SET name = ? WHERE id = ?', [newFileName, fileId], this._success, this._error);
      });
    },

    deleteFile: function(fileId) {
      this._db.transaction(function(tx) {
        tx.executeSql('DELETE FROM `files` WHERE id = ?', [fileId], this._success, this._error);

        tx.executeSql('DROP TABLE `'+fileId+'`', [], this._success, this._error);
      });
    },

    addAction: function(fileId, action) {
      this._db.transaction(function(tx) {
        tx.executeSql('INSERT INTO `'+fileId+'` (type, value) VALUES (?, ?)', [action.type, JSON.stringify(action.value)], this._success, this._error);
      });
    },

    updateFileModified: function(fileId, timestamp) {
      this._db.transaction(function(tx) {
        tx.executeSql('UPDATE `files` SET modifiedTime = ? WHERE id = ?', [timestamp, fileId], this._success, this._error);
      });
    },

    clearAll: function() {
      this.getFiles((function(files) {
        for (var i = 0; i < files.length; i++) {
          this.deleteFile(files[i].id);
        }
      }).bind(this));
    },

    // The database was created, set up the tables
    _databaseCreated: function(db) {
      this._db.transaction(function(tx) {
        tx.executeSql('CREATE TABLE IF NOT EXISTS files ' +
          '(id VARCHAR(255) PRIMARY KEY, name VARCHAR(255), modifiedTime INTEGER)');
      });
    },

    // JSON Decode should be an array of columns that have JSON that should be parsed
    _convertResultToObject: function(results, JSONDecode) {
      var rows = results.rows;
      var objArray = new Array(rows.length);

      for (var i = 0; i < rows.length; i++) {
        var item = rows.item(i);

        var newObj = {};
        objArray[i] = newObj;

        for (var prop in item) {
          newObj[prop] = item[prop];
        }

        if (JSONDecode) {
          for (var j = 0; j < JSONDecode.length; j++) {
            // If this key exists on the object
            var value = objArray[i][JSONDecode[j]];
            if (value) {
              // Replace it with a JSON Parsed version
              var obj = JSON.parse(value);
              objArray[i][JSONDecode[j]] = obj;
            }
          }
        }

      }

      return objArray;
    },

    _success: function(e) {
      console.log("Query Success", e);
    },

    _error: function(e) {
      console.error("Error with WebSQL", e);
    }


  });

  return WebSQLBacking;
});
/*
TODO:
  Make data.js have the same functions 
*/

define('data',["class", "dataBacking/indexedDBBacking", "dataBacking/webSQLBacking", "event"], function(Class, IndexedDBBacking, WebSQLBacking, Event) {
  var Data = Class.extend({
    _backing: null,

    init: function() {
      var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.oIndexedDB || window.msIndexedDB;
      
      if (indexedDB) {
        console.log("Using IndexedDB as data store");
        this._backing = new IndexedDBBacking();  
      }
      else
      {
        console.log("Using WebSQL as data store");
        this._backing = new WebSQLBacking();
      }
      

      Event.addListener("fileModified", this._fileModified.bind(this));
    },

    // Get the name of all the files we have
    getFiles: function(callback) {
      this._backing.getFiles(callback);
    },

    getFileActions: function(fileId, callback) {
      this._backing.getFileActions(fileId, callback);
    },

    // Create a new file and returns the file name
    createFile: function(callback) {
      this._backing.createFile(callback);
    },

    renameFile: function(fileId, newFileName) {
      this._backing.renameFile(fileId, newFileName);
    },

    deleteFile: function(fileId) {
      this._backing.deleteFile(fileId);
    },

    addAction: function(fileId, action) {
      this._backing.addAction(fileId, action);
    },

    removeLastAction: function(fileId) {
      this._backing.removeLastAction(fileId);
    },

    // Delete all the file rows, delete all the file databases,
    // delete everything for files from local storage
    clearAll: function() {
      this._backing.clearAll();
    },

    _fileModified: function(data) {
      this._backing.updateFileModified(data.fileId, data.timestamp);
    },

    // Get the stored file settings
    localFileSettings: function(fileId, settings) {
      if (settings) {
        localStorage[fileId] = JSON.stringify(settings);
      }

      if (!localStorage[fileId]) {
        localStorage[fileId] = JSON.stringify({
          offsetX: 0,
          offsetY: 0,
          scale: 1
        });
      }

      return JSON.parse(localStorage[fileId]);
    },
  });

  var data = new Data();
  window.data = data

  return data;
});
define('templates/fileList',[], function() {

  function FileList() {
    var template = '<li class="file-info">'+
                      '<div class="thumbnail-wrapper">'+
                        '<canvas class="thumbnail"></canvas>'+
                      '</div>'+
                      '<div class="file-details">'+
                        '<span class="file-name"></span>'+
                        '<span data-action="delete">Delete</span>'+
                      '</div>'+
                    '</li';
    var element = document.createElement("div");
    element.innerHTML = template;
    return element.firstChild;
  }

  return FileList;
});
define('components/drawCanvas',["class", "helpers"], function(Class, Helpers) {
  var DrawCanvas = Class.extend({
    _canvas: null,
    _ctx: null,
    _settings: null,

    // Holds all of the main actions
    _backCanvas: null,
    _backCtx: null,

    // Holds at most one action
    _tempCanvas: null,
    _tempCtx: null,

    init: function(canvas, settings) {
      this._canvas = canvas;
      this._ctx = canvas.getContext("2d");
      this._settings = settings;

      this._backCanvas = document.createElement("canvas");
      this._backCtx = this._backCanvas.getContext("2d");

      this._tempCanvas = document.createElement("canvas");
      this._tempCtx = this._tempCanvas.getContext("2d");
    },

    // Creates a back canvas and draws all the actions to it and renders it on the main canvas
    doAll: function(actions) {      
      this._backCanvas.width = this._canvas.width;
      this._backCanvas.height = this._canvas.height;

      this._clearCanvas(this._backCanvas, this._backCtx);

      // Also clear the temp canvas
      this._clearCanvas(this._tempCanvas, this._tempCtx);

      // Keep the line width the same no matter the zoom level
      var strokeSize = 1;
      this._backCtx.lineWidth = strokeSize / this._settings.scale;

      for (var i = 0; i < actions.length; i++) {
        var action = actions[i];

        this._doAction(this._backCtx, action);
      }
    },

    // The action is done to a temporary canvas
    doTemporaryAction: function(action) {
      this._tempCanvas.width = this._canvas.width;
      this._tempCanvas.height = this._canvas.height;

      this._clearCanvas(this._tempCanvas, this._tempCtx);

      var strokeSize = 1;
      this._tempCtx.lineWidth = strokeSize / this._settings.scale;
      this._doAction(this._tempCtx, action);
    },

    addAction: function(action) {
      this._doAction(this._backCtx, action);

      // Clears the temp canvas when you add something to the back
      this._clearCanvas(this._tempCanvas, this._tempCtx);
    },

    _clearCanvas: function(canvas, ctx) {
      ctx.setTransform(this._settings.scale, 0, 0, this._settings.scale, this._settings.offsetX, this._settings.offsetY);

      var topLeft = Helpers.screenToWorld(this._settings, 0, 0);
      var bottomRight = Helpers.screenToWorld(this._settings, canvas.width, canvas.height);

      ctx.clearRect(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);
    },

    render: function() {
      console.log("render called!");
      this._ctx.clearRect(0,0, this._canvas.width, this._canvas.height);
      this._ctx.drawImage(this._backCanvas, 0, 0, this._backCanvas.width, this._backCanvas.height);
      this._ctx.drawImage(this._tempCanvas, 0, 0, this._tempCanvas.width, this._tempCanvas.height);
    },


    _doAction: function(ctx, action) {
      if (action.type == "stroke") {
        this._drawStroke(ctx, action.value);
      }
    },

    updateSettings: function(settings) {
      this._settings = settings;
    },

    _drawStroke: function(ctx, stroke) {
      if (stroke.points.length < 2) {
        return;
      }

      var controlPoints = [];
      var points = stroke.points;

      if (!stroke.controlPoints) {
        controlPoints = Helpers.getCurveControlPoints(points);
      } else {
        controlPoints = stroke.controlPoints;
      }

      var point = points[0];

      ctx.beginPath();
      ctx.moveTo(point.x, point.y);

      for (var i = 1; i < points.length; i++) {
        point = points[i];
        var cp1 = controlPoints[i - 1].first;
        var cp2 = controlPoints[i - 1].second;
        ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, point.x, point.y);
      }

      ctx.stroke();
    },
  });

  return DrawCanvas;

  /*
  drawAll(actions) // Draw all actions to a back canvas
  drawTemporary(action) // draw action on front canvas
  addAction(action) // add action to back canvas
  */

});
define('components/manipulateCanvas',["components/drawCanvas", "helpers"], function(DrawCanvas, Helpers) {

  var ManipulateCanvas = DrawCanvas.extend({
    zoom: function(x, y, dScale) {
      // Can't zoom that far!
      if (this._settings.scale + dScale < .001 || this._settings.scale + dScale > 20000) {
        return false;
      }

      var world = Helpers.screenToWorld(this._settings, x, y);
      this._settings.scale += dScale;
      var scr = Helpers.worldToScreen(this._settings, world.x, world.y);

      var diffScr = {
        x: x - scr.x,
        y: y - scr.y
      };

      this._settings.offsetX += diffScr.x; // * this._settings.scale;
      this._settings.offsetY += diffScr.y; // * this._settings.scale;

      return true;
    },

    pan: function(dx, dy) {
      this._settings.offsetX += dx;
      this._settings.offsetY += dy;

      return true;
    },

    panTo: function(x, y) {
      this._settings.offsetX = x;
      this._settings.offsetY = y;
    }
  });

  return ManipulateCanvas;
});
define('components/thumbnail',["class", "helpers", "data", "components/manipulateCanvas"], function(Class, Helpers, Data, ManipulateCanvas) {

  var Thumbnail = Class.extend({
    _canvas: null,

    init: function(canvas) {
      this._canvas = canvas;
    },

    render: function(file) {
      var fileInfo = file;

      data.getFileActions(file.id, (function(actions) {
        var settings = data.localFileSettings(file.id);

        var manipulateCanvas = new ManipulateCanvas(this._canvas, settings);

        // Find out what world point is in the middle
        var centerScreen = {
          x: window.innerWidth / 2,
          y: window.innerHeight / 2
        };
        var centerWorld = Helpers.screenToWorld(settings, centerScreen.x, centerScreen.y);

        var scale = Math.min(this._canvas.width / window.innerWidth, this._canvas.height / window.innerHeight);
        var zoomDiff = (settings.scale * scale) - settings.scale;
        manipulateCanvas.zoom(0, 0, zoomDiff);

        // Now that we have zoomed, find the middle of the canvas
        var centerScreenAfter = {
          x: this._canvas.width / 2,
          y: this._canvas.height / 2
        };

        // And where the middle point was from before
        var centerScreenPointAfter = Helpers.worldToScreen(settings, centerWorld.x, centerWorld.y);

        // pan the difference
        var diffScreen = {
          x: centerScreenAfter.x - centerScreenPointAfter.x,
          y: centerScreenAfter.y - centerScreenPointAfter.y
        };
        manipulateCanvas.pan(diffScreen.x, diffScreen.y);

        manipulateCanvas.doAll(actions);
        manipulateCanvas.render();
      }).bind(this));
    }
  });

  return Thumbnail;
});
define('sections/fileList',["section", "tapHandler", "event", "helpers", "data", "templates/fileList", "components/thumbnail"], function(Section, TapHandler, Event, Helpers, Data, FileListTemplate, Thumbnail) {

  var FileList = Section.extend({
    id: "files-list-container",

    // The parent pane for this page
    _filesPane: null,

    // The element
    _fileListElement: null,

    // The set of files we are displaying on the page
    // fileId => info
    _files: null,

    // Th order the files appear on the page
    // index => fileId
    _fileOrder: null,

    _resizeTimeout: null,

    init: function(filesPane) {
      this._super();

      this._filesPane = filesPane;

      this._fileListElement = document.getElementById("files-list");
      this._files = {};
      this._fileOrder = [];

      this._resizeAndRender = this._resizeAndRender.bind(this);
      this._actuallyResizeAndRender = this._actuallyResizeAndRender.bind(this);

      Data.getFiles((function(files) {

        console.log("got files", files);

        for (var i = 0; i < files.length; i++) {
          var file = files[i];
          this._files[file.id] = file;
          this._fileOrder[i] = file.id;
          var fileTemplate = this._newFileWrapper(file);
          this._fileListElement.appendChild(fileTemplate);
        }

        this._actuallyResizeAndRender();
      }).bind(this));

      new TapHandler(document.getElementById("file-create"), {
        tap: this._newDoc.bind(this)
      });

      new TapHandler(this._fileListElement, {
        tap: this._docSelected.bind(this)
      });

      Event.addListener("fileModified", this._fileModified.bind(this));
      Event.addListener("fileRenamed", this._fileRenamed.bind(this));
    },

    show: function(fileInfo) {
      if (fileInfo) {
        // We came from draw, it is the info of the file we were just looking at
        var file = this._files[fileInfo.id];
        if (!file) {
          console.error("We somehow came from a file that doesn't exist");
        }

        file.thumbnail.render(file.file);
      }

      window.addEventListener("resize", this._resizeAndRender);
    },

    hide: function() {
      window.removeEventListener("resize", this._resizeAndRender);
    },

    _newFileWrapper: function(file) {
      var newEle = new FileListTemplate();

      var canvas = newEle.getElementsByClassName("thumbnail")[0];
      var fileName = newEle.getElementsByClassName("file-name")[0];

      var thumbnail = new Thumbnail(canvas);
      fileName.innerText = file.name;

      newEle.fileId = file.id;

      this._files[file.id] = {
        element: newEle,
        file: file,
        canvas: canvas,
        thumbnail: thumbnail
      };

      return newEle;
    },

    // Resize every thumbnail canvas and re-render them
    _resizeAndRender: function() {
      if (this._resizeTimeout) {
        clearTimeout(this._resizeTimeout);
      }

      this._resizeTimeout = setTimeout(this._actuallyResizeAndRender.bind(this), 500);
    },

    _actuallyResizeAndRender: function() {
      for (var fileId in this._files) {
        var file = this._files[fileId];

        var canvasParent = file.canvas.parentElement;
        file.canvas.width = canvasParent.offsetWidth;
        file.canvas.height = canvasParent.offsetHeight;
        file.thumbnail.render(file.file);
      }
    },

    _newDoc: function() {
      console.log("new doc");
      data.createFile((function(file) {
        var fileTemplate = this._newFileWrapper(file);
        this._fileOrder.unshift(file.id);
        this._fileListElement.insertBefore(fileTemplate, this._fileListElement.children[0]);
      }).bind(this));
    },

    _docSelected: function(e) {
      var element = e.srcElement;
      var parent = Helpers.parentEleWithClassname(e.srcElement, "file-info");

      if (parent) {
        if (element.dataset.action && element.dataset.action == "delete") {

          var file = this._files[parent.fileId];
          this._fileListElement.removeChild(file.element);
          delete this._files[parent.fileId];
          data.deleteFile(parent.fileId);

          // delete file
          return;
        }

        this._filesPane.setPane("draw", this._files[parent.fileId].file);
      }

    },

    _fileModified: function(data) {
      console.log("File was changed", data);

      var index = this._fileOrder.indexOf(data.fileId);
      console.log("was index", index);

      // Move every element up
      for (var i = index; i < this._files.length - 1; i++) {
        this._fileOrder[i] = this._fileOrder[i+1];
      }

      // Change the length to get rid of the last element
      this._fileOrder.length = this._fileOrder.length - 1;

      // Put this one at the beginning
      this._fileOrder.unshift(data.fileId);

      // Now actually take the element out and put it at the beginning too
      var element = this._files[data.fileId].element;
      this._fileListElement.removeChild(element);
      this._fileListElement.insertBefore(element, this._fileListElement.children[0]);
    },

    _fileRenamed: function(data) {
      console.log("File renamed", data);

      this._files[data.fileId].name = data.name;
      var element = this._files[data.fileId].element;
      var fileNameElement = element.getElementsByClassName("file-name")[0];
      fileNameElement.innerText = data.name;
    }

  });

  return FileList;

});
define('sections/draw',["section", "globals", "event", "helpers", "tapHandler", "db", "data", "components/manipulateCanvas"], function(Section, g, Event, Helpers, TapHandler, db, Data, ManipulateCanvas) {

  var Draw = Section.extend({
    id: "draw",

    // The parent pane for this page
    _filesPane: null,

    // Instance of draw canvas that is handling all the drawing
    _manipulateCanvas: null,

    // The actual canvas element
    _canvas: null,

    // The file we are currently rendering
    _fileInfo: null,

    // Local settings such as offset and zoom
    _settings: null,

    // The actions we are taking
    _actions: null,

    // If we are currently doing something like drawing, it will be here
    _currentAction: null,

    // Do we need to update on this frame?
    _needsUpdate: true,

    // Set this to false to stop the render loop
    _shouldRender: false,

    // The current tool, zoom or pan
    _currentTool: "pan",

    // When you move the mouse, what is the tool to use?
    _currentPointTool: "pencil",

    // Timeout for 
    _saveTransformTimeout: null,

    _redoStack: null,

    // The tap handler for the draw pane. Needed to turn on and off gestures
    _canvasTapHandler: null,

    _toolTapHandler: null,

    _fileNameElement: null,

    init: function(filesPane) {
      this._super();

      this._filesPane = filesPane;

      this._canvas = document.getElementById('canvas');

      this._resize = this._resize.bind(this);

      this._canvasTapHandler = new TapHandler(canvas, {
        start: this._start.bind(this),
        move: this._move.bind(this),
        end: this._end.bind(this),
        gesture: this._gesture.bind(this)
      });


      this._toolTapHandler = new TapHandler(document.getElementById("tools"), {
        tap: this._toolChanged.bind(this),
        start: this._toolStart.bind(this),
        end: this._toolEnd.bind(this)
      });

      new TapHandler(document.getElementById("menu"), {
        tap: this._menuTapped.bind(this),
      });

      this.element.addEventListener("mousewheel", this._mouseWheel.bind(this));
      this.element.addEventListener("keydown", this._keyDown.bind(this));

      this._fileNameElement = document.getElementById("fileName");
      this._fileNameElement.addEventListener("keydown", this._fileNameKeyDown.bind(this));
      this._fileNameElement.addEventListener("blur", this._fileNameBlur.bind(this));
    },

    show: function(file) {
      this._fileInfo = file;

      this._actions = [];
      this._redoStack = [];

      console.log("draw shown for file", file);

      this._fileNameElement.innerText = this._fileInfo.name;

      data.getFileActions(file.id, (function(results) {
        this._actions = results;
        this._needsUpdate = true;

        this._settings = data.localFileSettings(file.id);

        this._manipulateCanvas = new ManipulateCanvas(this._canvas, this._settings);

        // Add all the actions to the manipulate canvas
        this._manipulateCanvas.doAll(this._actions);

        this._shouldRender = true;
        this._redraw();
      }).bind(this));

      // We don't need data to resize
      this._resize();



      // Focus on the canvas after we navigate to it
      setTimeout(function() {
        canvas.focus();
      }.bind(this), 400);

      window.addEventListener("resize", this._resize);
    },

    hide: function() {
      this._shouldRender = false;

      window.removeEventListener("resize", this._resize);
    },

    _resize: function() {
      this._canvas.width = window.innerWidth;
      this._canvas.height = window.innerHeight;

      this._needsUpdate = true;
    },

    _zoom: function(x, y, dScale) {
      if (this._manipulateCanvas.zoom(x, y, dScale)) {
        this._saveTransform();
        this._manipulateCanvas.doAll(this._actions);
        this._needsUpdate = true;
      }
    },

    _pan: function(dx, dy) {
      if (this._manipulateCanvas.pan(dx, dy)) {
        this._saveTransform();
        this._manipulateCanvas.doAll(this._actions);
        this._needsUpdate = true;
      }
    },

    _mouseWheel: function(e) {

      if (this._currentTool == "pan") {
        //console.log("pan", e);
        this._pan(-e.deltaX, -e.deltaY);
      } else if (this._currentTool == "zoom") {
        if (e.deltaY != 0) {
          //console.log(e);
          this._zoom(e.offsetX, e.offsetY, e.deltaY / 100 * this._settings.scale);
        }
      }
    },

    _start: function(e) {
      if (this._currentPointTool == "pan") {

      } else if (this._currentPointTool == "pencil") {
        var world = Helpers.screenToWorld(this._settings, e.distFromLeft, e.distFromTop);

        console.log("started at", world);
        if (this._currentAction) {
          console.error("Current action isn't null!");
        }

        this._currentAction = {
          type: "stroke",
          value: {
            points: [world]
          }
        }

        // Make sure the redo stack is empty as we are starting to draw again
        this._redoStack = [];
      }
    },

    _move: function(e) {
      if (this._currentPointTool == "pan") {
        // Make sure there are two touches
        if (e.touches.length == 1) {
          return;
        }

        this._pan(e.xFromLast, e.yFromLast);
      } else if (this._currentPointTool == "pencil") {

        if (!this._currentAction) {
          // no current action. This can happen if we were dragging a tool and let up the
          // tool button and kept dragging
          return;
        }

        var world = Helpers.screenToWorld(this._settings, e.distFromLeft, e.distFromTop);

        //console.log("world", e, world);
        var currentStroke = this._currentAction.value;

        var points = currentStroke.points;
        var lastPoint = points[points.length - 1];


        var dist = Math.sqrt(((lastPoint.x - world.x) * (lastPoint.x - world.x)) + ((lastPoint.y - world.y) * (lastPoint.y - world.y)));
        //console.log("dist", dist);

        //if (dist < 0.0003) {
        if (dist < 0.001) {
          return;
        }

        currentStroke.points.push(world);
        this._needsUpdate = true;
      }
    },

    _end: function(e) {
      if (this._currentPointTool == "pencil") {
        if (!this._currentAction) {
          // no current action. This can happen if we were dragging a tool and let up the
          // tool button and kept dragging
          return;
        }

        var currentAction = this._currentAction;
        this._currentAction = null;

        var currentStroke = currentAction.value;

        if (currentStroke.points.length < 2) {
          // two options, don't count the stroke
          return;

          // Or create a second point, same as the first.
          // Canvas doesn't seem to render a line with two identical points.
          currentStroke.points.push(currentStroke.points[0]);
        }

        var controlPoints = Helpers.getCurveControlPoints(currentStroke.points);
        currentStroke.controlPoints = controlPoints;

        this._saveAction(currentAction);
      }
    },

    _saveAction: function(action) {
      // Store the current action
      this._actions.push(action);

      this._manipulateCanvas.addAction(action);

      // And persist it
      data.addAction(this._fileInfo.id, action);

      Event.trigger("fileModified", {
        fileId: this._fileInfo.id,
        timestamp: Date.now()
      });

      this._needsUpdate = true;
    },

    _gesture: function(e) {
      this._pan(e.xFromLast, e.yFromLast);
      this._zoom(e.x, e.y, e.scaleFromLast * this._settings.scale);
    },

    _redraw: function() {
      // If we shouldn't render, exit the loop
      if (!this._shouldRender) {
        return;
      }

      if (this._needsUpdate) {
        if (this._currentAction) {
          this._manipulateCanvas.doTemporaryAction(this._currentAction)
        }

        this._manipulateCanvas.render();
        this._needsUpdate = false;
      }

      requestAnimationFrame(this._redraw.bind(this));
    },

    _menuTapped: function(e) {
      if (e.srcElement.tagName == "LI") {
        var action = e.srcElement.dataset.action;

        if (action == "back") {
          this._filesPane.setPane("list", this._fileInfo);
        } else if (action == "rename") {
          e.srcElement.focus();
        } else if (action == "export") {
          var dataURL = this._canvas.toDataURL();
          window.open(dataURL);
        }
      }
    },

    _toolChanged: function(e) {
      if (e.srcElement.tagName == "LI") {
        var action = e.srcElement.dataset.action;
        var tool = e.srcElement.dataset.tool;

        if (tool) {
          this._currentTool = e.srcElement.dataset.tool;
        } else if (action) {
          if (action == "undo") {
            this._undo();
          } else if (action == "redo") {
            this._redo();
          }
        }
      }
    },

    _toolStart: function(e) {
      var tool = e.srcElement.dataset.tool;

      if (e.srcElement.tagName == "LI" && tool) {
        this._currentPointTool = tool;

        if (tool == "pan") {
          console.log("pan started", e);
        }

        e.stopPropagation();
        this._canvasTapHandler.ignoreGestures(true);
        this._toolTapHandler.ignoreGestures(true);
      }
    },

    _toolEnd: function(e) {

      // Is a 
      function isInside(event) {
        function offset(type, element) {
          if (element == null) {
            return 0;
          }

          return element[type] + offset(type, element.parentElement);
        }

        var offsetLeft = offset("offsetLeft", e.srcElement);
        var offsetTop = offset("offsetTop", e.srcElement);

        return e.clientX >= offsetLeft &&
          e.clientX <= offsetLeft + e.srcElement.offsetWidth &&
          e.clientY >= offsetTop &&
          e.clientY <= offsetTop + e.srcElement.offsetHeight;
      }

      if (!e ||
        (e && !e.touches) ||
        (e && e.touches && e.touches.length == 0) || // No touches left
        (e && e.touches && !isInside()) // Not inside of the tool anymore
      ) {

        var tool = e.srcElement.dataset.tool;

        if (e.srcElement.tagName == "LI" && tool) {
          if (tool == "pan") {
            console.log("pan ended");
          }

          this._currentPointTool = "pencil";
          this._canvasTapHandler.ignoreGestures(false);
          this._toolTapHandler.ignoreGestures(false);
        }
      }
    },

    _keyDown: function(e) {
      var key = String.fromCharCode(e.keyCode);
      //console.log(e);
      // console.log("key", key);
      // console.log(e);

      if (
        ((g.isMac() && e.metaKey && e.shiftKey) && key == "Z") ||
        ((g.isPC() && e.ctrlKey) && key == "Y")) {
        // Redo

        if (this._redoStack.length > 0) {
          this._redo();
        }
      } else if ((
          (g.isMac() && e.metaKey) ||
          (g.isPC() && e.ctrlKey)
        ) &&
        key == "Z") {
        // Undo

        e.preventDefault();
        this._undo();
      } else if (key == "Z") {
        this._currentTool = "zoom";
      } else if (key == "P") {
        this._currentTool = "pan";
      }

    },

    _undo: function() {
      if (this._actions.length > 0) {
        var action = this._actions.pop();

        // It is impossible to delete the id off of the action, so we have to create a new object
        var newObj = {};

        for (var prop in action) {
          if (prop != "id") {
            newObj[prop] = action[prop];
          }
        }

        this._redoStack.push(newObj);

        data.removeLastAction(this._fileInfo.id);
        this._manipulateCanvas.doAll(this._actions);

        this._needsUpdate = true;
      }
    },

    _redo: function() {
      if (this._redoStack.length > 0) {
        var nowAction = this._redoStack.pop();
        this._saveAction(nowAction);
      }
    },


    /*
    // Create an image with all of the lines on it.
    _save: function() {
      // FIgure out the bounds of the lines
      var top = lines[0].startY;
      var left = lines[0].startX;
      var bottom = lines[0].startY;
      var right = lines[0].startX;

      for (var i = 0; i < lines.length; i++) {
        var top = Math.min(lines[i].startY, Math.min(lines[i].endY, top));
        var left = Math.min(lines[i].startX, Math.min(lines[i].endX, top));
        var bottom = Math.max(lines[i].startY, Math.max(lines[i].endY, top));
        var right = Math.max(lines[i].startX, Math.max(lines[i].endX, top));
      }

      // Create a canvas large enough that it can contain the bounds
      var width = right - left;
      var height = bottom - top;

      // Expand for some padding
      var paddingX = width * .05;
      var paddingY = height * .05;
      width *= 1.1;
      height *= 1.1;

      var transformations = {
        offsetX: paddingX,
        offsetY: paddingY,
        scale: 1
      }

      var canvas = document.createElement("canvas");
      canvas.width = width;
      canvas.height = height;

      var ctx = canvas.getContext("2d");
    }
*/
    _fileNameKeyDown: function(e) {
      if (e.keyCode == 13) { // Enter
        this._fileNameElement.blur();
      }
    },

    _fileNameBlur: function(e) {
      var name = e.srcElement.innerText;
      data.renameFile(this._fileInfo.id, name);

      Event.trigger("fileRenamed", {
        fileId: this._fileInfo.id,
        name: name
      });
    },


    _saveTransform: function() {
      // If the timeout is set already
      if (this._saveTransformTimeout) {

        // Clear it and set a new one
        clearTimeout(this._saveTransformTimeout);
      }

      this._saveTransformTimeout = setTimeout((function() {
        data.localFileSettings(this._fileInfo.id, this._settings);
        this._saveTransformTimeout = null;
      }).bind(this), 100);

    },
  });

  return Draw;

});
define('managers/files',["section", "event", "sections/fileList", "sections/draw"], function(Section, Event, FileList, Draw) {

  var Files = Section.extend({
    id: "files",

    _paneWrapper: null,

    _screenWidth: 0,

    _defaultSettings: {},

    panes: null,

    currentPaneName: null,

    init: function() {
      this._super();

      this._defaultSettings = {
        title: {
          text: "Photos"
        }
      };

      this._screenWidth = window.innerWidth;

      this._paneWrapper = document.getElementById("files-pane-wrapper");

      this._windowResized = this._windowResized.bind(this);
      this._finishedSliding = this._finishedSliding.bind(this);

      this._paneWrapper.addEventListener("webkitTransitionEnd", this._finishedSliding);

      this.panes = {};

      this.panes.list = {
        offsetX: 0,
        pane: new FileList(this)
      };

      this.panes.draw = {
        offsetX: this._screenWidth,
        pane: new Draw(this)
      };

      this.panes.draw.pane.element.style.webkitTransform = 'translate3d(' + this._screenWidth + "px, 0px, 0px)";

      var state = {
        pane: "list",
        details: null
      };
      if (localStorage.filesPane) {
        state = JSON.parse(localStorage.filesPane);
      }

      this.setPane(state.pane, state.details);


      window.files = this;
    },

    show: function() {
      window.addEventListener("resize", this._windowResized);
    },

    hide: function() {
      window.removeEventListener("resize", this._windowResized);
    },

    setPane: function(pane, details) {
      if (this.currentPaneName == pane)
        return;

      var paneobj = null;

      if (this.currentPaneName) {

        var paneobj = this.panes[this.currentPaneName].pane;

        if (paneobj.hide) {
          paneobj.hide();
        }

        paneobj.afterHide();
      }


      paneobj = this.panes[pane].pane;

      if (paneobj.show) {
        paneobj.show(details);
      }

      paneobj.afterShow();

      this.currentPaneName = pane;


      // Finish up
      var totalPane = this.panes[pane];

      var translate = "translate3d(" + (-1 * totalPane.offsetX) + "px, 0px, 0px)";
      if (this._paneWrapper.style.webkitTransform != translate) {
        this._paneWrapper.classList.add("ani4");
        this._paneWrapper.style.webkitTransform = translate;
      }


      if (pane == "list") {
        delete localStorage["filesPane"];
      } else {
        localStorage.filesPane = JSON.stringify({
          pane: pane,
          details: details
        });
      }
    },

    _finishedSliding: function() {
      // Remove the animation
      this._paneWrapper.classList.remove("ani4");

      this._redoOffsets();

      this._paneWrapper.style.webkitTransform = "translate3d(0px, 0px, 0px)";
    },

    _windowResized: function() {
      this._redoOffsets();
    },

    _redoOffsets: function() {
      window.current = this;

      this._screenWidth = window.innerWidth;

      // Set the offsets on all the panes so that the current pane is 0,0
      var currentIndex = 0;
      for (var pane in this.panes) {
        if (this.currentPaneName == pane) {
          break;
        }

        currentIndex++;

      }

      var startX = -1 * currentIndex * this._screenWidth;
      for (var pane in this.panes) {
        this.panes[pane].offsetX = startX;
        this.panes[pane].pane.element.style.webkitTransform = 'translate3d(' + startX + "px, 0px, 0px)";
        startX += this._screenWidth;
      }
    }
  });

  return Files;

});
define('sections/main',["section", "event", "managers/files"], function(Section, Event, Files) {

  var Main = Section.extend({
    id: "main-container",

    mainContent: null,

    // The panes we slide between in the main-content
    panes: null,
    currentPane: "",


    init: function() {
      this._super();

      this.mainContent = document.getElementById("main-content");
      this.panes = {};

      this.panes.files = new Files();

      Event.addListener("logout", this._logout.bind(this));
    },

    show: function() {
      console.log("screens shown");

      if (localStorage.currentPane) {
        this.setPane(localStorage.currentPane);
      } else {
        this.setPane("files");
      }

      //this.showDrawer();
    },

    setPane: function(pane) {
      if (this.currentPane == pane)
        return;

      var paneobj = null;

      if (this.currentPane) {

        var paneobj = this.panes[this.currentPane];

        if (paneobj.hide) {
          paneobj.hide();
        }

        paneobj.afterHide();
      }

      paneobj = this.panes[pane];

      if (paneobj.show) {
        paneobj.show();
      }

      paneobj.afterShow();

      this.currentPane = pane;

      localStorage.currentPane = pane;
      Event.trigger("paneChanged", {
        pane: paneobj
      });
    },

    _logout: function() {
      delete localStorage.currentPane;
    }
  });

  return Main;

});
define('managers/login',["event", "sections/login", "sections/main"], function(Event, LoginSection, MainSection) {
  function LoginManager() {
    this.init();
  }

  LoginManager.prototype = {
    pages: null,
    currentPage: "",

    init: function() {
      this.pages = {};

      Event.addListener("login", this._login.bind(this));
      Event.addListener("logout", this._logout.bind(this));

      this.pages.login = new LoginSection();
      this.pages.main = new MainSection();

      if (localStorage.loggedIn == "true") {
        this.setPage("main");
      }
      else
      {
        this.setPage("login");
      }
    },

    setPage: function(page) {
      var pageobj = null;

      if (this.currentPage) {

        var pageobj = this.pages[this.currentPage];

        if (pageobj.hide) {
          pageobj.hide();
        }
        pageobj.afterHide();
      }

      pageobj = this.pages[page];
      
      if (pageobj.show) {
        pageobj.show();
      }
      pageobj.afterShow();

      this.currentPage = page;
    },

    _login: function() {
      localStorage.loggedIn = true;
      this.setPage("main");
    },

    _logout: function() {
      localStorage.loggedIn = false;
      this.setPage("login");
    }
  };

  return LoginManager;
});
require(["event", "globals", "managers/login"], function(Event, g, LoginManager) {

  function init() {
    window.log = console.log.bind(console);

    document.addEventListener("touchmove", function(e) {
      e.preventDefault();
    });

    document.addEventListener("mousewheel", function(e) {
      e.preventDefault();
    });

    g.setHTMLDevices();

    var loginManager = new LoginManager();
    window.login = loginManager;

    window.addEventListener("resize", function() {
      // make sure we are scrolled to 0. Without this there are problems 
      // when changing device orientation
      window.scroll(0,0);
    })
  }

  if (document.readyState === "interactive" || document.readyState === "complete") {
    init();
  } else {
    document.addEventListener("DOMContentLoaded", init, false);
  }
});
define("main", function(){});
}());
//# sourceMappingURL=main.min.js.map